{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pynvl","text":"<p>General purpose data utilities, inspired by PL/SQL.</p> <p>This package contains a suite of functions which flatten out data handling operations.  </p>"},{"location":"#features","title":"\ud83d\udd39 Features","text":"<ul> <li><code>nvl(expr, default)</code> =&gt; Substitute a value when <code>None</code> is encountered</li> <li><code>decode(expr, search1, result1, ..., default)</code> =&gt; if-elif-else functionality  </li> <li><code>sign(n)</code> =&gt; Returns a value indicating the sign of a number</li> <li><code>noneif(expr1, expr2)</code> =&gt; If expr1 and expr1 are equal then return None</li> <li><code>nvl2(expr, value_if_not_null, value_if_null)</code> =&gt; Extending NVL to substitute when non-None value is encountered</li> <li>Special handling: <code>decode(None, None, ...)</code> treats <code>None == None</code> (follows PL/SQL)  </li> <li>Fully tested with <code>pytest</code> </li> <li>MIT Licensed  </li> </ul>"},{"location":"#pandas-integration","title":"\ud83d\udd39 Pandas Integration","text":"<p><code>pynvl</code> also provides optional pandas-native helpers for use with <code>pd.Series</code> and operates element-wise.</p> <pre><code>import pandas as pd\nfrom pynvl import pd_sign, pd_nvl, pd_nvl2, pd_noneif, pd_decode\n\ns = pd.Series([-5, 0, 3, None])\n\nprint(pd_sign(s).tolist())\n# [-1, 0, 1, None]\n\nprint(pd_nvl(s, 99).tolist())\n# [-5, 0, 3, 99]\n\nprint(pd_nvl2(s, \"not-null\", \"is-null\").tolist())\n# ['not-null', 'not-null', 'not-null', 'is-null']\n\nprint(pd_noneif(s, 0).tolist())\n# [-5, None, 3, None]\n\nprint(pd_decode(s, -5, \"neg\", 0, \"zero\", 3, \"pos\", default=\"other\").tolist())\n# ['neg', 'zero', 'pos', 'other']\n</code></pre>"},{"location":"#installation-from-pypi","title":"\ud83d\udd39 Installation From PyPI","text":"<pre><code>pip install pynvl-lib\n</code></pre>"},{"location":"#demo-page","title":"\ud83d\udd39 Demo page","text":""},{"location":"LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright (c) 2025 Better Info Tech Ltd Author: Shane Wilson</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"contributing/","title":"Contributing to pynvl","text":"<p>This project is still early stage and contributions of all kinds are welcome.</p>"},{"location":"contributing/#how-to-contribute","title":"\ud83d\udd39 How to Contribute","text":"<ol> <li> <p>Fork the repository    Click the Fork button on GitHub and clone your fork.    <code>bash    git clone https://github.com/&lt;your-username&gt;/pynvl_project.git    cd pynvl</code></p> </li> <li> <p>Create a feature branch    Click the Fork button on GitHub and clone your fork.    <code>bash    git checkout -b feature/my-feature</code></p> </li> <li> <p>Install dependencies in a virtual environment <code>bash    python -m venv .venv    .venv\\Scripts\\activate   # Windows    pip install -r requirements-dev.txt   # if available</code></p> </li> <li> <p>Run tests    Click the Fork button on GitHub and clone your fork.    <code>bash    pytest tests/</code></p> </li> <li> <p>Commit your changes    Click the Fork button on GitHub and clone your fork.    <code>bash    git add .    git commit -m \"Add: short description of change\"    git push origin feature/my-feature</code></p> </li> <li> <p>Open a Pull Request    Go to GitHub and open a PR against the main branch.</p> </li> </ol>"},{"location":"contributing/#other-notes","title":"\ud83d\udd39Other Notes","text":"<ul> <li>Use pytest for all tests and place tests under tests directory</li> <li>Add examples if your change affects usage!  Documentation is in docs/ folder.</li> <li>Use Python 3.10+</li> <li>Report any bugs</li> <li>Run <code>mkdocs serve</code> locally to preview changes.</li> <li>Suggest any new helper functions</li> <li>You agree that your contributions fall under the same MIT licence as the project.</li> </ul>"},{"location":"demo/","title":"Demo page","text":""},{"location":"demo/#this-page-gives-longer-demos-of-the-core-pynvl-functions-and-their-pd_-pandas-equivalents","title":"This page gives longer demos of the core <code>pynvl</code> functions and their <code>pd_*</code> pandas equivalents.","text":""},{"location":"demo/#nvl","title":"\ud83d\udd39 NVL","text":""},{"location":"demo/#substitute-a-value-when-a-none-value-is-encountered","title":"Substitute a value when a <code>None</code> value is encountered.","text":""},{"location":"demo/#nvl-string1-replace_with","title":"<code>NVL( string1, replace_with)</code>","text":"<pre><code>from pynvl import nvl\n\nprint(nvl(None, 5))      # 5\nprint(nvl(\"hello\", 99))  # 'hello'\n\n# Nesting - Use email if exists, fallback to phone then office. Show 'No contacts if all are None.\nemail = phone = office = office_extension = None\nprint(nvl(nvl(nvl(email, phone), office), \"No contacts\"))\n\n# Python core\nif email is not None:\n    primary_contact = email\nelif phone is not None:\n    primary_contact = phone\nelif office_extension is not None:\n    primary_contact = office\nelse:\n    primary_contact = \"No contacts\"\n</code></pre>"},{"location":"demo/#sign","title":"\ud83d\udd39 SIGN","text":""},{"location":"demo/#returns-a-value-indicating-the-sign-of-a-number","title":"Returns a value indicating the sign of a number","text":""},{"location":"demo/#signnumber","title":"<code>sign(number)</code>","text":"<pre><code>from pynvl import sign\n\nprint(sign(-5))  # -1\nprint(sign(0))   # 0\nprint(sign(9))   # 1\n\n# Simplified expressions\nstatus = {1: \"In Credit\", 0: \"Zero Balance\", -1: \"Overdrawn\"}[sign(balance)]\n\n# If-elif code bloat\nbalance = 0\nif balance &gt; 0:\n    status = \"In Credit\"\nelif balance == 0:\n    status = \"Zero Balance\"\nelse:\n    status = \"Overdrawn\"\n</code></pre>"},{"location":"demo/#decode","title":"\ud83d\udd39 DECODE","text":""},{"location":"demo/#if-elif-else-functionality","title":"if-elif-else functionality","text":""},{"location":"demo/#decodeexpression-search-result-search-result-default","title":"<code>decode(expression , search , result [, search , result]... [, default] )</code>","text":""},{"location":"demo/#if-no-matches-are-found-the-decode-function-will-return-default","title":"If no matches are found, the DECODE function will return default.","text":""},{"location":"demo/#if-default-is-omitted-then-the-decode-function-will-return-none-if-no-matches-are-found","title":"If default is omitted, then the DECODE function will return None (if no matches are found).","text":"<pre><code>from pynvl import decode\n\nprint(decode(\"A\", \"A\", \"Alpha\", \"B\", \"Beta\", default=\"Unknown\")) # 'Alpha'\nprint(decode(\"Z\", \"A\", \"Alpha\", \"B\", \"Beta\", \"Fallback\")) # 'Fallback'\nprint(decode(\"Z\", \"A\", \"Alpha\", \"B\", \"Beta\")) # None\n\n# Remove multiple if-elif tests - Clean and easy to read\nstatus_code = None\ncustomer_status = decode(\n    status_code,\n    \"A\", \"Active\",\n    \"B\", \"Blocked\",\n    \"C\", \"Closed\",\n    None, \"Unknown\",\n    default=\"Other\"\n)\n\n# Bloated without decode...\nif status_code == \"A\":\n    customer_status = \"Active\"\nelif status_code == \"B\":\n    customer_status = \"Blocked\"\nelif status_code == \"C\":\n    customer_status = \"Closed\"\nelif status_code is None:\n    customer_status = \"Unknown\"\nelse:\n    customer_status = \"Other\"\n\n</code></pre>"},{"location":"demo/#noneif","title":"\ud83d\udd39 NONEIF","text":""},{"location":"demo/#if-expr1-and-expr2-are-equal-the-noneif-function-returns-none-otherwise-it-returns-expr1","title":"If expr1 and expr2 are equal, the NONEIF function returns NONE. Otherwise, it returns expr1.","text":""},{"location":"demo/#noneif-expr1-expr2","title":"<code>NONEIF( expr1, expr2 )</code>","text":"<pre><code>from pynvl import noneif\n\nprint(noneif(5, 5))   # None\nprint(noneif(7, 8))   # 7\n\nprimary = \"alice@example.com\"\nbackup = \"alice@example.com\"\n\ncontact = noneif(backup, primary) or primary # alice@example.com\n\n# Code bloat\nif backup == primary:\n    contact = primary\nelse:\n    contact = backup if backup is not None else primary\n</code></pre>"},{"location":"demo/#nvl2","title":"\ud83d\udd39 NVL2","text":""},{"location":"demo/#lets-you-substitutes-a-value-when-a-null-value-is-encountered-as-well-as-when-a-non-null-value-is-encountered","title":"Lets you substitutes a value when a null value is encountered as well as when a non-null value is encountered.","text":""},{"location":"demo/#nvl2-string1-value_if_not_none-value_if_none","title":"<code>NVL2( string1, value_if_not_none, value_if_none )</code>","text":"<pre><code>from pynvl import nvl2\n\nprint(nvl2(\"X\", \"not-none\", \"is-none\"))  # 'not-none'\nprint(nvl2(None, \"not-none\", \"is-none\")) # 'is-none'\n\ndiscount_code = \"ABC\"\nmessage = nvl2(discount_code, \"Discount applied!\", \"No discount available\")\n\n# Bloated...\nif discount_code is not None:\n    message = \"Discount applied!\"\nelse:\n    message = \"No discount available\"\n</code></pre>"},{"location":"demo/#pandas-integration","title":"\ud83d\udd39 Pandas Integration","text":"<pre><code>import pandas as pd\nfrom pynvl import pd_sign, pd_nvl, pd_nvl2, pd_noneif, pd_decode\n\ns = pd.Series([-5, 0, 3, None])\n\nprint(pd_sign(s).tolist())\n# [-1, 0, 1, None]\n\nprint(pd_nvl(s, 99).tolist())\n# [-5, 0, 3, 99]\n\nprint(pd_nvl2(s, \"not-null\", \"is-null\").tolist())\n# ['not-null', 'not-null', 'not-null', 'is-null']\n\nprint(pd_noneif(s, 0).tolist())\n# [-5, None, 3, None]\n\nprint(pd_decode(s, -5, \"neg\", 0, \"zero\", 3, \"pos\", default=\"other\").tolist())\n# ['neg', 'zero', 'pos', 'other']\n</code></pre>"},{"location":"install/","title":"Installation","text":"<p>pynvl is distributed as a standard Python package avaialble from PyPI.</p>"},{"location":"install/#install-from-pypi","title":"\ud83d\udd39 Install from PyPI","text":"<p>Install the usual way.</p> <pre><code>pip install pynvl-lib\n</code></pre>"},{"location":"roadmap/","title":"Roadmap","text":"<p>The <code>pynvl</code> package is just warming up! Here are the planned enhancements and future directions.</p>"},{"location":"roadmap/#core-functions","title":"\ud83d\udd39 Core Functions","text":"<ul> <li>Initial helpers: <code>nvl</code>, <code>decode</code>, <code>sign</code>, <code>noneif</code>, <code>nvl2</code></li> <li>Add more PL/SQL-inspired helpers:</li> <li><code>extract</code>, <code>extract_xml</code></li> </ul>"},{"location":"roadmap/#pandas-integration","title":"\ud83d\udd39 Pandas Integration","text":"<ul> <li><code>pd_nvl(series, default)</code> =&gt; fill <code>NaN</code>/<code>None</code> with default  </li> <li><code>pd_decode(series, mapping, default)</code> =&gt; map values with fallback  </li> <li><code>pd_sign(series)</code> =&gt; vectorized numeric sign  </li> </ul>"},{"location":"roadmap/#regex-helpers","title":"\ud83d\udd39 Regex Helpers","text":"<ul> <li><code>regexp_like(string, pattern)</code> =&gt; boolean match  </li> <li><code>regexp_substr(string, pattern, occurrence=1)</code> =&gt; extract substring  </li> <li><code>regexp_replace(string, pattern, replacement)</code> =&gt; regex substitution  </li> <li><code>regexp_instr(string, pattern)</code> =&gt; position of match</li> </ul>"},{"location":"roadmap/#testing-quality","title":"\ud83d\udd39 Testing &amp; Quality","text":"<ul> <li>Expand test coverage across all functions  </li> <li>Cover edge cases (e.g. <code>None == None</code> in <code>decode</code>)  </li> </ul>"},{"location":"roadmap/#documentation","title":"\ud83d\udd39 Documentation","text":"<ul> <li>Expand API docs with detailed examples  </li> </ul>"},{"location":"roadmap/#longer-term-ideas","title":"\ud83d\udd39 Longer-Term Ideas","text":"<ul> <li>Performance optimizations for large data sets  </li> </ul>"},{"location":"roadmap/#contributions","title":"\ud83d\udd39 Contributions","text":"<p>New ideas are welcome! See CONTRIBUTING.md for guidelines.</p>"}]}