{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pynvl","text":"<p>Helper functions for data engineering in Python, inspired by PL/SQL.</p> <p>This package contains a suite of functions which flatten out data handling. It\u2019s complemented by helpers for use with pandas as well which I hope people find useful.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li><code>nvl(expr, default)</code> =&gt; coalesce <code>None</code> to a default  </li> <li><code>decode(expr, search1, result1, ..., default)</code> =&gt; compact conditional mapping  </li> <li><code>sign(n)</code> =&gt; return <code>-1</code>, <code>0</code>, or <code>1</code> depending on numeric sign  </li> <li>Special handling: <code>decode(None, None, ...)</code> treats <code>None == None</code> (follows PL/SQL)  </li> <li>Fully tested with <code>pytest</code> </li> <li>MIT Licensed  </li> </ul>"},{"location":"#pandas-integration","title":"\ud83d\udcca Pandas Integration","text":"<p><code>pynvl</code> also provides optional pandas-native helpers for use with <code>pd.Series</code> and operates element-wise.</p> <pre><code>import pandas as pd\nfrom pynvl import pd_sign, pd_nvl, pd_nvl2, pd_noneif, pd_decode\n\ns = pd.Series([-5, 0, 3, None])\n\nprint(pd_sign(s).tolist())\n# [-1, 0, 1, None]\n\nprint(pd_nvl(s, 99).tolist())\n# [-5, 0, 3, 99]\n\nprint(pd_nvl2(s, \"not-null\", \"is-null\").tolist())\n# ['not-null', 'not-null', 'not-null', 'is-null']\n\nprint(pd_noneif(s, 0).tolist())\n# [-5, None, 3, None]\n\nprint(pd_decode(s, -5, \"neg\", 0, \"zero\", 3, \"pos\", default=\"other\").tolist())\n# ['neg', 'zero', 'pos', 'other']\n</code></pre>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":""},{"location":"#from-testpypi-sandbox","title":"From TestPyPI (sandbox)","text":"<pre><code>pip install --index-url https://test.pypi.org/simple/ --no-deps pynvl-test\n</code></pre>"},{"location":"#see-the-demo-page-for-full-examples-of-all-functions","title":"\ud83d\udc49 See the Demo page for full examples of all functions.","text":""},{"location":"LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright (c) 2025 Better Info Tech Ltd Author: Shane Wilson</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"contributing/","title":"\ud83e\udd1d Contributing to pynvl","text":"<p>Thank you for your interest in contributing! \ud83c\udf89 This project is still early stage and contributions of all kinds are welcome: bug reports, suggestions, code, tests, docs.</p>"},{"location":"contributing/#how-to-contribute","title":"\ud83d\udee0\ufe0f How to Contribute","text":"<ol> <li> <p>Fork the repository    Click the Fork button on GitHub and clone your fork.    ```bash    git clone https://github.com//pynvl_project.git    cd pynvl <li> <p>Create a feature branch    Click the Fork button on GitHub and clone your fork.    ```bash    git checkout -b feature/my-feature</p> </li> <li> <p>Install dependencies in a virtual environment    ```bash    python -m venv .venv    .venv\\Scripts\\activate   # Windows    pip install -r requirements-dev.txt   # if available</p> </li> <li> <p>Run tests    Click the Fork button on GitHub and clone your fork.    ```bash    pytest tests/</p> </li> <li> <p>Commit your changes    Click the Fork button on GitHub and clone your fork.    ```bash    git add .    git commit -m \"Add: short description of change\"    git push origin feature/my-feature</p> </li> <li> <p>Open a Pull Request    Go to GitHub and open a PR against the main branch.</p> </li>"},{"location":"contributing/#other-notes","title":"Other Notes","text":"<ul> <li>Use pytest for all tests and place tests under tests directory</li> <li>Add examples if your change affects usage!  Documentation is in docs/ folder.</li> <li>Use Python 3.10+</li> <li>Report any bugs</li> <li>run mkdocs serve</li> <li>Suggest any new helper functions</li> <li>You agree that your contributions fall under the same MIT licence as the project.</li> </ul>"},{"location":"demo/","title":"\ud83e\uddea Demo page","text":""},{"location":"demo/#this-page-gives-longer-demos-of-the-core-pynvl-functions-and-their-pd_-pandas-equivalents","title":"This page gives longer demos of the core <code>pynvl</code> functions and their <code>pd_*</code> pandas equivalents.","text":""},{"location":"demo/#nvl","title":"\ud83d\udd39 NVL","text":"<pre><code>from pynvl import nvl\n\nprint(nvl(None, 5))      # 5\nprint(nvl(\"hello\", 99))  # 'hello'\n\n# Nesting - Use email if exists, fallback to phone then office. Show 'No contacts if all are None.\nprint(nvl(nvl(nvl(email, phone), office), \"No contacts\"))\n\n# Python core\nif email is not None:\n    primary_contact = email\nelif phone is not None:\n    primary_contact = phone\nelif office_extension is not None:\n    primary_contact = office\nelse:\n    primary_contact = \"No contacts\"\n</code></pre>"},{"location":"demo/#sign","title":"\ud83d\udd39 SIGN","text":"<pre><code>from pynvl import sign\n\nprint(sign(-5))  # -1\nprint(sign(0))   # 0\nprint(sign(9))   # 1\n\n# Simplified expressions\nstatus = {1: \"In Credit\", 0: \"Zero Balance\", -1: \"Overdrawn\"}[sign(balance)]\n\n# If-elif code bloat\nif balance &gt; 0:\n    status = \"In Credit\"\nelif balance == 0:\n    status = \"Zero Balance\"\nelse:\n    status = \"Overdrawn\"\n</code></pre>"},{"location":"demo/#decode","title":"\ud83d\udd39 DECODE","text":"<pre><code>from pynvl import decode\n\nprint(decode(\"A\", \"A\", \"Alpha\", \"B\", \"Beta\", default=\"Unknown\")) # 'Alpha'\nprint(decode(\"Z\", \"A\", \"Alpha\", \"B\", \"Beta\", \"Fallback\")) # 'Fallback'\n\n# Remove multiple if-elif tests - Clean and easy to read\nstatus_code = None\ncustomer_status = decode(\n    status_code,\n    \"A\", \"Active\",\n    \"B\", \"Blocked\",\n    \"C\", \"Closed\",\n    None, \"Unknown\",\n    default=\"Other\"\n)\n\n# Bloated without decode...\nif status_code == \"A\":\n    customer_status = \"Active\"\nelif status_code == \"B\":\n    customer_status = \"Blocked\"\nelif status_code == \"C\":\n    customer_status = \"Closed\"\nelif status_code is None:\n    customer_status = \"Unknown\"\nelse:\n    customer_status = \"Other\"\n\n</code></pre>"},{"location":"demo/#noneif","title":"\ud83d\udd39 NONEIF","text":"<pre><code>from pynvl import noneif\n\nprint(noneif(5, 5))   # None\nprint(noneif(7, 8))   # 7\n</code></pre>"},{"location":"demo/#nvl2","title":"\ud83d\udd39 NVL2","text":"<pre><code>from pynvl import nvl2\n\nprint(nvl2(\"X\", \"not-null\", \"is-null\"))  # 'not-null'\nprint(nvl2(None, \"not-null\", \"is-null\")) # 'is-null'\n</code></pre>"},{"location":"demo/#pandas-integration","title":"\ud83d\udcca Pandas Integration","text":"<pre><code>import pandas as pd\nfrom pynvl import pd_sign, pd_nvl, pd_nvl2, pd_noneif, pd_decode\n\ns = pd.Series([-5, 0, 3, None])\n\nprint(pd_sign(s).tolist())\n# [-1, 0, 1, None]\n\nprint(pd_nvl(s, 99).tolist())\n# [-5, 0, 3, 99]\n\nprint(pd_nvl2(s, \"not-null\", \"is-null\").tolist())\n# ['not-null', 'not-null', 'not-null', 'is-null']\n\nprint(pd_noneif(s, 0).tolist())\n# [-5, None, 3, None]\n\nprint(pd_decode(s, -5, \"neg\", 0, \"zero\", 3, \"pos\", default=\"other\").tolist())\n# ['neg', 'zero', 'pos', 'other']\n</code></pre>"},{"location":"install/","title":"Installation","text":"<p>pynvl is distributed as a standard Python package. You can install it from TestPyPI (for sandbox testing) or from PyPI (once officially released).</p>"},{"location":"install/#install-from-testpypi-sandbox","title":"\u2705 Install from TestPyPI (sandbox)","text":"<p>This is useful while the project is under development and before the first stable release to PyPI.</p> <p>```bash pip install --index-url https://test.pypi.org/simple/ --no-deps pynvl</p>"},{"location":"roadmap/","title":"\ud83d\uddfa\ufe0f Roadmap","text":"<p>The <code>pynvl</code> package is just getting started. Here are the planned enhancements and future directions.</p>"},{"location":"roadmap/#core-functions","title":"\ud83d\udce6 Core Functions","text":"<ul> <li>Initial helpers: <code>nvl</code>, <code>decode</code>, <code>sign</code></li> <li>Add more PL/SQL-inspired helpers:</li> <li><code>extract</code>, <code>extract_xml</code></li> </ul>"},{"location":"roadmap/#pandas-integration","title":"\ud83d\udcca Pandas Integration","text":"<ul> <li><code>pd_nvl(series, default)</code> =&gt; fill <code>NaN</code>/<code>None</code> with default  </li> <li><code>pd_decode(series, mapping, default)</code> =&gt;map values with fallback  </li> <li><code>pd_sign(series)</code> =&gt; vectorized numeric sign  </li> </ul>"},{"location":"roadmap/#regex-helpers-to-do","title":"\ud83d\udd0d Regex Helpers (TO DO)","text":"<ul> <li><code>regexp_like(string, pattern)</code> =&gt; boolean match  </li> <li><code>regexp_substr(string, pattern, occurrence=1)</code> =&gt; extract substring  </li> <li><code>regexp_replace(string, pattern, replacement)</code> =&gt; regex substitution  </li> <li><code>regexp_instr(string, pattern)</code> =&gt; position of match</li> </ul>"},{"location":"roadmap/#testing-quality","title":"\ud83e\uddea Testing &amp; Quality","text":"<ul> <li>Expand test coverage across all functions  </li> <li>Cover edge cases (e.g. <code>None == None</code> in <code>decode</code>)  </li> </ul>"},{"location":"roadmap/#documentation","title":"\ud83c\udf0d Documentation","text":"<ul> <li>Expand API docs with detailed examples  </li> <li>Publish full site via GitHub Pages (MkDocs Material)  </li> <li>Tutorials for analysts &amp; data engineers transitioning from SQL  </li> </ul>"},{"location":"roadmap/#longer-term-ideas","title":"\ud83d\ude80 Longer-Term Ideas","text":"<ul> <li>Performance optimizations for large data sets  </li> </ul> <p>\ud83d\udca1 Contributions and ideas are welcome! See CONTRIBUTING.md  for guidelines.</p>"}]}